import Clickable from "components/ui/Clickable";
import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useRive } from "@rive-app/react-canvas";
import { AnimatePresence, useAnimationControls } from "framer-motion";
import { useEffect, useState } from "react";
import type { WheelEventHandler } from "react";
import data from "data";
import Lines from "components/graphics/lines";
import PageContent from "components/main/PageContent";

const Home: NextPage = () => {
  const [scrollIndex, setScrollIndex] = useState(0);
  const [isScrolling, setIsScrolling] = useState(false);
  const [hasEntered, setHasEntered] = useState(false);

  const controls = useAnimationControls();
  const { rive, RiveComponent } = useRive({
    src: "/rive/dial.riv",
    autoplay: false,
    onStop: () => {
      controls.start("reEnter").catch(console.error);
    },
  });

  if (!data) throw new Error("No data");

  const pagesLength = data.pages.length;

  if (!hasEntered) {
    rive && rive.play("Enter");
  }

  const onNext = () => {
    rive && rive.play("Next");
  };
  const onPrevious = () => {
    rive && rive.play("Previous");
  };
  const onForward = () => {
    rive && rive.play("Forward");
  };
  const onBack = () => {
    rive && rive.play("Back");
  };

  const indexSelect = async (index: number): Promise<void> => {
    if (index === scrollIndex) return;
    setHasEntered(true);
    setIsScrolling(true);
    await controls.start("exit");

    if (index > scrollIndex) {
      onForward();
    } else {
      onBack();
    }

    setScrollIndex(index);
  };

  const onScroll = async (e: WheelEvent) => {
    if (isScrolling) return;
    setIsScrolling(true);
    setHasEntered(true);
    if (e.deltaY > 0) {
      await controls.start("exit");
      if (scrollIndex === pagesLength - 1) {
        setScrollIndex(0);
        onNext();
        return;
      }
      setScrollIndex(scrollIndex + 1);
      onNext();
    }
    if (e.deltaY < 0) {
      await controls.start("exit");
      if (scrollIndex === 0) {
        setScrollIndex(pagesLength - 1);
        onPrevious();
        return;
      }
      setScrollIndex(scrollIndex - 1);
      onPrevious();
    }
  };

  useEffect(() => {
    const timeout = setTimeout(() => {
      setIsScrolling(false);
    }, 700);
    return () => clearTimeout(timeout);
  }, [scrollIndex]);

  useEffect(() => {
    const startSequence = async () => {
      await controls.start("enter");
    };

    if (!hasEntered) {
      startSequence().catch(console.error);
      return;
    }
  }, [controls, hasEntered]);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
      </Head>
      <nav className="fixed top-0 flex w-screen justify-end p-6 text-dark">
        <Link href="/">
          <Clickable>{`Let's Talk`}</Clickable>
        </Link>
      </nav>
      <main
        className="relative flex h-screen w-screen items-center justify-start bg-light text-dark"
        onWheel={onScroll as unknown as WheelEventHandler<HTMLDivElement>}
      >
        <div className="relative flex aspect-1/2 h-screen">
          <RiveComponent />
        </div>
        <div className="absolute left-12 top-1/2 flex aspect-lines h-1/3 -translate-y-1/2 flex-col items-start  justify-center">
          <Lines pagesLength={pagesLength} indexSelect={indexSelect} />
        </div>

        <AnimatePresence mode="wait">
          {data.pages.map((page, index) => {
            if (index === scrollIndex)
              return (
                <PageContent page={page} controls={controls} key={page.title} />
              );
          })}
        </AnimatePresence>
      </main>
    </>
  );
};

export default Home;
